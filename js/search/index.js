// Generated by CoffeeScript 1.4.0
var index;

index = {
  init: function() {
    this.detect_elements();
    return this.bind_events();
  },
  detect_elements: function() {
    this.gmap_input = $("#search");
    this.gmap_error = $("#gmaps-error");
    this.lat_input = $("#lat");
    this.lng_input = $("#lng");
    this.geocoder = void 0;
    this.map = void 0;
    this.marker = void 0;
    this.type_switcher = $("#type_switcher");
    this.type = $("#type");
    return this.form_search = $("#form-search");
  },
  bind_events: function() {
    this.autocomplete_init();
    this.form_submiter();
    this.prevent_enter();
    return this.init_validate();
  },
  update_ui: function(address, latLng) {
    this.gmap_input.autocomplete("close");
    this.gmap_input.val(address);
    this.lat_input.val(latLng.lat());
    return this.lng_input.val(latLng.lng());
  },
  geocode_lookup: function(type, value, update) {
    var me, request;
    me = this;
    update = (typeof update !== "undefined" ? update : false);
    request = {};
    request[type] = value;
    return this.geocoder.geocode(request, function(results, status) {
      me.gmap_error.html("");
      me.gmap_error.hide();
      if (status === google.maps.GeocoderStatus.OK) {
        if (results[0]) {
          return me.update_ui(results[0].formatted_address, results[0].geometry.location);
        } else {
          me.gmap_error.html("Sorry, something went wrong. Try again!");
          return me.gmap_error.show();
        }
      } else {
        if (type === "address") {
          me.gmap_error.html("Sorry! We couldn't find " + value + ". Try a different search term.");
          return me.gmap_error.show();
        } else {
          me.gmap_error.html("Woah... that's pretty remote! You're going to have to manually enter a place name.");
          me.gmap_error.show();
          return me.update_ui("", value);
        }
      }
    });
  },
  autocomplete_init: function() {
    var me,
      _this = this;
    me = this;
    this.geocoder = new google.maps.Geocoder();
    this.gmap_input.autocomplete({
      source: function(request, response) {
        return me.geocoder.geocode({
          address: request.term
        }, function(results, status) {
          return response($.map(results, function(item) {
            return {
              label: item.formatted_address,
              value: item.formatted_address,
              geocode: item
            };
          }));
        });
      },
      select: function(event, ui) {
        return me.update_ui(ui.item.value, ui.item.geocode.geometry.location);
      }
    });
    return this.gmap_input.bind("keydown", function(event) {
      if (event.keyCode === 13) {
        _this.geocode_lookup("address", _this.gmap_input.val(), true);
        return _this.gmap_input.autocomplete("disable");
      } else {
        return _this.gmap_input.autocomplete("enable");
      }
    });
  },
  form_submiter: function() {
    var me,
      _this = this;
    me = this;
    return this.form_search.submit(function() {
      if (_this.form_search.valid()) {
        return $(".btn-group .btn.active").each(function() {
          var input;
          input = document.createElement("input");
          input.setAttribute("type", "hidden");
          input.setAttribute("name", "type_id[]");
          input.setAttribute("value", this.value);
          return me.form_search.append(input);
        });
      }
    });
  },
  prevent_enter: function() {
    return $(window).keydown(function(event) {
      if (event.keyCode === 13) {
        event.preventDefault();
        return false;
      }
    });
  },
  init_validate: function() {
    return this.form_search.validate({
      rules: {
        search: {
          required: true
        },
        highlight: function(label) {
          return $(label).closest(".control-group").addClass("error");
        },
        success: function(label) {
          return label.text("OK!").addClass("valid").closest(".control-group").addClass("success");
        }
      }
    });
  }
};

$(document).ready(function() {
  return index.init();
});
